 package normal
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Interfaces/Interfaces.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Crossroad.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Init.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Blinking.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/adaptive/Crossroads.gcd"
@TransitionPriority = value-based
@ScenarioContractStatechart = Crossroads (permissive)
statechart Normal [
	port police : requires PoliceInterrupt
	port policeReversed : provides PoliceInterrupt
	port priorityOutput : provides LightCommands
	port priorityOutputReversed : requires LightCommands
	port secondaryOutput : provides LightCommands
	port secondaryOutputReversed : requires LightCommands
] {
	timeout delay0
	timeout delay1
	timeout delay2
	region ^region {
		initial Initial
		state firstState
		state hotComponentViolation
		state state0 {
			entry /
			set delay0 := 1000 ms;
		}
		state state1 {
			entry /
			set delay1 := 2000 ms;
		}
		state state2 {
			entry /
			set delay2 := 1000 ms;
		}
		@SpecialStateAnnotation accepting
		state AcceptingState
	}
	transition from Initial to firstState
	transition (3) from firstState to state0 when priorityOutputReversed.displayYellow /
	raise priorityOutput.displayYellow;
	transition (1) from firstState to hotComponentViolation when priorityOutputReversed.displayRed ||
		priorityOutputReversed.displayGreen || priorityOutputReversed.displayNone ||
		secondaryOutputReversed.any
	transition (3) from state0 to state1 when timeout delay0 && priorityOutputReversed.displayRed &&
		secondaryOutputReversed.displayGreen
	/
	raise priorityOutput.displayRed;
	raise secondaryOutput.displayGreen;
	transition (1) from state0 to hotComponentViolation when priorityOutputReversed.displayYellow ||
		priorityOutputReversed.displayNone || secondaryOutputReversed.displayYellow ||
		secondaryOutputReversed.displayNone
	transition (3) from state1 to state2 when timeout delay1 && secondaryOutputReversed.displayYellow
		/
	raise secondaryOutput.displayYellow;
	transition (1) from state1 to hotComponentViolation when priorityOutputReversed.any ||
		secondaryOutputReversed.displayRed || secondaryOutputReversed.displayGreen ||
		secondaryOutputReversed.displayNone
	transition (3) from state2 to AcceptingState when timeout delay2 &&
		priorityOutputReversed.displayGreen && secondaryOutputReversed.displayRed
	/
	raise priorityOutput.displayGreen;
	raise secondaryOutput.displayRed;
	transition (1) from state2 to hotComponentViolation when priorityOutputReversed.displayYellow ||
		priorityOutputReversed.displayNone || secondaryOutputReversed.displayYellow ||
		secondaryOutputReversed.displayNone
}