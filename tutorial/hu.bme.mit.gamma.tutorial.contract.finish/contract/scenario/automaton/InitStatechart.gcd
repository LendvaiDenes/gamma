package init
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Interfaces/Interfaces.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/model/Crossroad.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Init.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/phase/Blinking.gcd"
import "/hu.bme.mit.gamma.tutorial.contract.finish/contract/adaptive/Crossroads.gcd"
@TransitionPriority = value-based
@ScenarioContractStatechart = Crossroads (permissive)
statechart Init [
	port police : requires PoliceInterrupt
	port policeREVERSED : provides PoliceInterrupt
	port priorityOutput : provides LightCommands
	port priorityOutputREVERSED : requires LightCommands
	port secondaryOutput : provides LightCommands
	port secondaryOutputREVERSED : requires LightCommands
] {
	region ^region {
		initial Initial
		state firstState
		state hotComponentViolation
		state state0
		@SpecialStateAnnotation accepting
		state AcceptingState
	}
	transition from Initial to firstState
	transition (3) from firstState to state0 when priorityOutputREVERSED.displayRed &&
		secondaryOutputREVERSED.displayRed /
	raise priorityOutput.displayRed;
	raise secondaryOutput.displayRed;
	transition (1) from firstState to firstState when any
	transition (3) from state0 to AcceptingState when priorityOutputREVERSED.displayGreen /
	raise priorityOutput.displayGreen;
	transition (1) from state0 to hotComponentViolation when any
}